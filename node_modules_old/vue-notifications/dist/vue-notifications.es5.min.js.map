{"version":3,"sources":["vue-notifications.es5.js"],"names":["root","factory","define","amd","exports","module","VueNotifications","this","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","getVersion","Vue","version","match","showDefaultMessage","_ref","type","message","msg","title","TYPES","error","console","warn","log","getValues","vueApp","config","result","keys","forEach","field","bind","call","showMessage","valuesObj","pluginOptions","cb","addMethods","targetObj","typesObj","v","setMethod","name","options","methods","makeMethod","configName","assign","propertyName","initVueNotificationPlugin","notifications","$options","$emit","PACKAGE_NAME","unlinkVueNotificationPlugin","attachedMethods","undefined","makeMixin","_ref2","EVANGELION","info","success","MESSAGES","alreadyInstalled","PLUGIN_NAME","methodNameConflict","types","timeout","installed","install","arguments","length","mixin","setPluginOptions","window","use"],"mappings":"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","file":"vue-notifications.es5.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.VueNotifications = factory();\n  }\n}(this, function() {\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar PLUGIN_NAME = 'VueNotifications';\nvar PACKAGE_NAME = 'vue-notifications';\nvar PROPERTY_NAME = 'notifications';\n\nvar TYPES = {\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  success: 'success'\n};\n\nvar EVANGELION = 1;\n\nvar MESSAGES = {\n  alreadyInstalled: PLUGIN_NAME + ': plugin already installed',\n  methodNameConflict: PLUGIN_NAME + ': names conflict - '\n};\n\nfunction getVersion(Vue) {\n  var version = Vue.version.match(/(\\d+)/g);\n  return +version[0];\n}\n\nfunction showDefaultMessage(_ref) {\n  var type = _ref.type,\n      message = _ref.message,\n      title = _ref.title;\n\n  var msg = 'Title: ' + title + ', Message: ' + message + ', Type: ' + type;\n  if (type === TYPES.error) console.error(msg);else if (type === TYPES.warn) console.warn(msg);else console.log(msg);\n}\n\nfunction getValues(vueApp, config) {\n  var result = {};\n\n  Object.keys(config).forEach(function (field) {\n    if (field === 'cb') {\n      result[field] = config[field].bind(vueApp);\n    } else {\n      result[field] = typeof config[field] === 'function' ? config[field].call(vueApp) : config[field];\n    }\n  });\n\n  return result;\n}\n\nfunction showMessage(config, vueApp) {\n  var valuesObj = getValues(vueApp, config);\n  var isMethodOverridden = VueNotifications.pluginOptions[valuesObj.type];\n  var method = isMethodOverridden ? VueNotifications.pluginOptions[valuesObj.type] : showDefaultMessage;\n  method(valuesObj, vueApp);\n\n  if (config.cb) return config.cb();\n}\n\nfunction addMethods(targetObj, typesObj) {\n  Object.keys(typesObj).forEach(function (v) {\n    targetObj[typesObj[v]] = function (config) {\n      config.type = typesObj[v];\n\n      return showMessage(config);\n    };\n  });\n}\n\nfunction setMethod(vueApp, name, options, pluginOptions) {\n  if (!options.methods) options.methods = {};\n\n  if (!options.methods[name]) {\n    options.methods[name] = makeMethod(vueApp, name, options, pluginOptions);\n  }\n}\n\nfunction makeMethod(vueApp, configName, options, pluginOptions) {\n  return function (config) {\n    var newConfig = Object.assign({}, VueNotifications.config, options[VueNotifications.propertyName][configName], config);\n\n    return showMessage(newConfig, pluginOptions, vueApp);\n  };\n}\n\nfunction initVueNotificationPlugin(vueApp, notifications, pluginOptions) {\n  if (!notifications) return;\n  Object.keys(notifications).forEach(function (name) {\n    return setMethod(vueApp, name, vueApp.$options, pluginOptions);\n  });\n  vueApp.$emit(PACKAGE_NAME + '-initiated');\n}\n\nfunction unlinkVueNotificationPlugin(vueApp, notifications) {\n  if (!notifications) return;\n  var attachedMethods = vueApp.$options.methods;\n  Object.keys(notifications).forEach(function (name) {\n    if (attachedMethods[name]) {\n      attachedMethods[name] = undefined;\n      delete attachedMethods[name];\n    }\n  });\n\n  vueApp.$emit(PACKAGE_NAME + '-unlinked');\n}\n\nfunction makeMixin(Vue, pluginOptions) {\n  var _ref2;\n\n  var init = getVersion(Vue) === EVANGELION ? 'init' : 'beforeCreate';\n\n  return _ref2 = {}, _defineProperty(_ref2, init, function () {\n    var notificationsField = this.$options[VueNotifications.propertyName];\n    initVueNotificationPlugin(this, notificationsField, pluginOptions);\n  }), _defineProperty(_ref2, 'beforeDestroy', function beforeDestroy() {\n    var notificationsField = this.$options[VueNotifications.propertyName];\n    unlinkVueNotificationPlugin(this, notificationsField);\n  }), _ref2;\n}\n\nvar VueNotifications = {\n  types: TYPES,\n  propertyName: PROPERTY_NAME,\n  config: {\n    type: TYPES.info,\n    timeout: 3000\n  },\n  pluginOptions: {},\n  installed: false,\n  install: function install(Vue) {\n    var pluginOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (this.installed) throw console.error(MESSAGES.alreadyInstalled);\n    var mixin = makeMixin(Vue, pluginOptions);\n    Vue.mixin(mixin);\n\n    this.setPluginOptions(pluginOptions);\n    addMethods(this, this.types);\n\n    this.installed = true;\n  },\n  setPluginOptions: function setPluginOptions() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.pluginOptions = options;\n  }\n};\n\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(VueNotifications);\n}\nreturn VueNotifications;\n}));\n"]}